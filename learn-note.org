#+hugo_base_dir: /Users/mengqiangding/study/blog/
#+hugo_section: post
#+hugo_auto_set_lastmod: t
#+hugo_code_fence: nil
#+options: author:nil
#+hugo_custom_front_matter: :author "mengqiangding"
#+EXPORT_AUTHOR: MengQiangding22
#+STARTUP: logdrawer

* 21天学会Emacs 学习笔记
从 2018 年就有在用 emacs 了，当时就是看的子龙山人的《21天学会Emacs》视频。
但是当时就看了两三个视频，随便配置了几个包，就开始写代码。那会还在上大学，主要用Emacs来写算法题，也就是单文本编辑，
编译操作使用 gcc。当时没学过操作系统，计算机组成，连镜像源也不知道是什么意思。

之后对于多文件的项目，几乎没有用 emacs 了，而是用更简单的 vscode。

直到工作之后，发现有个doom emacs基本做到开箱即用，又重新开始使用 emacs。

说一下 Doom Emacs 的几个优点：
1. 下载简单，只需要clone下来源码，然后使用自带的安装器就可以完成安装
2. 界面非常友好，不像 普通emacs那样简陋
3. 支持vim按键，学习Linux 肯定都会接触一些vim按键，熟练之后，会发现真的很好用。
4. which-key mode 你按下空格键，马上弹出一个快捷键指南，这个功能非常方便去探索新的功能
5. 下载包特别特别简单， init.el文件里面会列出Doom Emacs所有支持的包，只需要把注释取消，再调用 doom sync 即可完成安装
6. 本身默认的包就非常好用
7. workspace + projectile + tab + lsp 支持按照项目分成多个工作区, lsp 又可以让emacs轻松变成 IDE

Doom Emacs已经给你配置好了很多东西，你几乎不需要配置，马上就能开始探索（其实就是不断的查找快捷键），我按下空格
然后一个一个指令看。就通过这种方式+百度，只研究了几天，就能上手写 go 的项目了。在之后的工作里，我一直使用 emacs
写代码，探索了很多有用的功能。

但是在这个阶段，我只能是 Doom Emacs 用户，而不是 emacs 用户，我并不知道我按下的快捷键，他们是如何生效的
当出现问题时，我想解决也是非常困难。
举几个简单的例子：
1. tab 包可以把此项目中打开的 buffer 显示在 tab-bar。 理论上关闭是使用:"<spc> b d", 但是有时候发现关闭不了。
2. go 语言下载了一个新的 package，但是仍然提示找不到此包。

因为不了解 emacs 图形界面的基本模型，也不了解代码补全的机制， 对于包的依赖关系也不清晰，基础知识也不甚
了解，这就让我遇到一个问题，不知道从何下手。最直接的方式，当然是看源码，emacs 所有指令都对应一串代码，很容易找到，
但是直接看，往往很难看懂，加上层层嵌套，越看越晕。

即便如此，我还是一直在用，通过不停的百度，也能解决大半问题。
但是频繁的问题，让我慢慢开始意识到 emacs 基础的重要性。
直到有一天，emacs 启动直接白屏，我决定重新学习，从零开始配置。


这次学习的宗旨：
1. 所有视频全部过一遍，尽量简单，不要自己下载视频中没提到的包。
2. 每个视频做总结
3. 先记关键字，看完再做详细总结

视频地址: https://bilibili.com/video/BV12P4y1j7EL/?vd_source=259ee2f6ff984c9ca1ed1fdcea972eff
文档地址: https://book.emacs-china.org/
代码地址: https://gitee.com/emacs-china/emacs.d

** day12

** day15
1. treesit-auto
   用于补全
2. eldoc
   用于显示变量、函数的具体信息
3. xref-find-definition  xref-find-refence
   用于定义和引用见的跳转
   evil-goto-definition 会调用 xref-find-definition 用edebug可以验证
4. yasnippet
   用于补全，貌似没啥用
5. ff-find-related-file
   查找相关文件，比如 buffer.cpp 跳转到 buffer.h

** day16
1. window-numbering
   给每个窗口分配一个号码，方便跳转，感觉没啥用
2. es-window
   以数字的形式操作窗口，用起来有点复杂，先不用
3. buffer-move
   移动 buffer 的位置
4. resize-window
   改变 window 的大小等功能，感觉有点鸡肋，可以不用
5. winner
   可以在一个和多个窗口间切换，感觉用处不大
6. popper
   可以方便切换特殊的buffer

** day18
1. org-download
   |                  |                          |
   |------------------+--------------------------|
   | 在线截图         | org-download-screenshot  |
   | 从剪贴板获取图片 | org-download-clipboard   |
   | 不渲染图片       | org-toogle-inline-images |
#+begin_src org
  ,#+ATTR_HTML: :alt Zoomed image.
  ,#+ATTR_HTML: :width 300 :style border:2px solid black;
  [[file:pictures/2023-10-13_12-14-28_screenshot.jpg]]
#+end_src
代码效果：图片属性导出时修改了，但是在 org-mode中没有变化
#+ATTR_HTML: :alt Zoomed image.
#+ATTR_HTML: :width 300 :style border:2px solid black;
[[file:pictures/2023-10-13_12-14-28_screenshot.jpg]]

2. yasnippet
   yas-new-snippet 创建快捷方式， C-c C-c保存
   格式如下：
   #+begin_src snippet
     # -*- mode: snippet -*-
     # name: image-width
     # key: imw 
     # --

     ,#+ATTR_HTML: :width ${1:1000px}
     $0

   #+end_src 
   输入imw再按tab自动调用yas-expand进行扩展
3. org-protocol
   将网页复制的内容自动保存到本地 org 文件中，暂时不用
4. flyspell-correct ispell
   用于拼写检查，暂时不用
5. fanyi
   用于翻译，可以用google-translate代替

** day21
1. profiler-start  profiler-report
   会记录 start 到 report 过程中，所有函数对 cpu 或内存的消耗占比.
2. emacs-init-time
3. benchmark-init
   #+begin_src elisp
     (use-package benchmark-init
       :ensure t
       :demand t
       :config
       (add-hook 'after-init-hook 'benchmark-init/deactivate))
   #+end_src 
   benchmark-init/show-durations-tree
   benchmark-init/show-durations-tabulated
4. 开始优化
   1. 延迟加载
      #+begin_src elisp
        (setq use-package-always-defer t)
      #+end_src
      优化完: 5.8s
   2. 修改 init-ui.el
      修改 init-ui.el
      优化完 5.27s
   3. 修改init-org.el
      4.4s
   

